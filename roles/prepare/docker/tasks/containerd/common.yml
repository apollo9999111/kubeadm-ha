- name: 准备 Containerd 相关目录
  file: 
    name: "{{ item }}"
    state: directory
  with_items:
  - /etc/containerd
  - "{{ containerd_storage_dir }}"

- name: 渲染 Containerd 配置
  template:
    src: containerd-config.toml.j2
    dest: /etc/containerd/config.toml
    owner: root
    mode: 0644

- name: 渲染 crictl 配置
  template:
    src: containerd-crictl.yaml.j2
    dest: /etc/crictl.yaml
    owner: root
    mode: 0644

- name: 确认 crictl 是否安装
  stat: 
    path: "/usr/bin/crictl"
  register: crictl_stat

- name: 安装 crictl
  unarchive:
    src: "{{ containerd_crictl_url }}"
    dest: "/usr/bin"
    remote_src: yes
  when: crictl_stat.stat.isreg is not defined

- name: 重新加载 daemon
  systemd:
    daemon_reload: yes

- block:
  - name: 清理 iptables
    shell: >
      iptables -F &&
      iptables -X &&
      iptables -F -t nat &&
      iptables -X -t nat &&
      iptables -F -t raw &&
      iptables -X -t raw &&
      iptables -F -t mangle &&
      iptables -X -t mangle

  - name: 启动/重启 Containerd
    service:
      name: containerd
      state: restarted
      enabled: yes
  when: '"running" not in container_runtime_already_running.stdout'

- name: 设置 Containerd 开机自启
  service:
    name: containerd
    state: started
    enabled: yes

- block:
  - name: 确认相关目录是否存在
    file:
      path: "{{ offline_images_dest|dirname }}"
      state: directory
      mode: 0755
  - name: 分发所需的容器镜像
    copy: 
      src: "{{ offline_images_src }}"
      dest: "{{ offline_images_dest }}"
      mode: 0755
  - name: 加载所需的容器镜像
    shell: "ctr images import {{ offline_images_dest }}"
  when: install_mode != 'online'